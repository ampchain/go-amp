// Code generated by protoc-gen-go. DO NOT EDIT.
// source: message.proto

package amperp2p

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type AmperMessage_MessageType int32

const (
	AmperMessage_SENDBLOCK                AmperMessage_MessageType = 0
	AmperMessage_POSTTX                   AmperMessage_MessageType = 1
	AmperMessage_BATCHPOSTTX              AmperMessage_MessageType = 2
	AmperMessage_GET_BLOCK                AmperMessage_MessageType = 3
	AmperMessage_PING                     AmperMessage_MessageType = 4
	AmperMessage_GET_BLOCKCHAINSTATUS     AmperMessage_MessageType = 5
	AmperMessage_GET_BLOCK_RES            AmperMessage_MessageType = 6
	AmperMessage_GET_BLOCKCHAINSTATUS_RES AmperMessage_MessageType = 7
	// 向邻近确认区块是否为最新状态区块
	AmperMessage_CONFIRM_BLOCKCHAINSTATUS     AmperMessage_MessageType = 8
	AmperMessage_CONFIRM_BLOCKCHAINSTATUS_RES AmperMessage_MessageType = 9
	AmperMessage_MSG_TYPE_NONE                AmperMessage_MessageType = 10
	// 询问RPC端口信息
	AmperMessage_GET_RPC_PORT           AmperMessage_MessageType = 11
	AmperMessage_GET_RPC_PORT_RES       AmperMessage_MessageType = 12
	AmperMessage_GET_AUTHENTICATION     AmperMessage_MessageType = 13
	AmperMessage_GET_AUTHENTICATION_RES AmperMessage_MessageType = 14
)

var AmperMessage_MessageType_name = map[int32]string{
	0:  "SENDBLOCK",
	1:  "POSTTX",
	2:  "BATCHPOSTTX",
	3:  "GET_BLOCK",
	4:  "PING",
	5:  "GET_BLOCKCHAINSTATUS",
	6:  "GET_BLOCK_RES",
	7:  "GET_BLOCKCHAINSTATUS_RES",
	8:  "CONFIRM_BLOCKCHAINSTATUS",
	9:  "CONFIRM_BLOCKCHAINSTATUS_RES",
	10: "MSG_TYPE_NONE",
	11: "GET_RPC_PORT",
	12: "GET_RPC_PORT_RES",
	13: "GET_AUTHENTICATION",
	14: "GET_AUTHENTICATION_RES",
}

var AmperMessage_MessageType_value = map[string]int32{
	"SENDBLOCK":                    0,
	"POSTTX":                       1,
	"BATCHPOSTTX":                  2,
	"GET_BLOCK":                    3,
	"PING":                         4,
	"GET_BLOCKCHAINSTATUS":         5,
	"GET_BLOCK_RES":                6,
	"GET_BLOCKCHAINSTATUS_RES":     7,
	"CONFIRM_BLOCKCHAINSTATUS":     8,
	"CONFIRM_BLOCKCHAINSTATUS_RES": 9,
	"MSG_TYPE_NONE":                10,
	"GET_RPC_PORT":                 11,
	"GET_RPC_PORT_RES":             12,
	"GET_AUTHENTICATION":           13,
	"GET_AUTHENTICATION_RES":       14,
}

func (x AmperMessage_MessageType) String() string {
	return proto.EnumName(AmperMessage_MessageType_name, int32(x))
}

func (AmperMessage_MessageType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{0, 0}
}

type AmperMessage_ErrorType int32

const (
	// success
	AmperMessage_SUCCESS AmperMessage_ErrorType = 0
	AmperMessage_NONE    AmperMessage_ErrorType = 1
	// common error
	AmperMessage_UNKNOW_ERROR             AmperMessage_ErrorType = 2
	AmperMessage_CHECK_SUM_ERROR          AmperMessage_ErrorType = 3
	AmperMessage_UNMARSHAL_MSG_BODY_ERROR AmperMessage_ErrorType = 4
	AmperMessage_CONNECT_REFUSE           AmperMessage_ErrorType = 5
	// block error
	AmperMessage_GET_BLOCKCHAIN_ERROR           AmperMessage_ErrorType = 6
	AmperMessage_BLOCKCHAIN_NOTEXIST            AmperMessage_ErrorType = 7
	AmperMessage_GET_BLOCK_ERROR                AmperMessage_ErrorType = 8
	AmperMessage_CONFIRM_BLOCKCHAINSTATUS_ERROR AmperMessage_ErrorType = 9
	AmperMessage_GET_AUTHENTICATION_ERROR       AmperMessage_ErrorType = 10
	AmperMessage_GET_AUTHENTICATION_NOT_PASS    AmperMessage_ErrorType = 11
)

var AmperMessage_ErrorType_name = map[int32]string{
	0:  "SUCCESS",
	1:  "NONE",
	2:  "UNKNOW_ERROR",
	3:  "CHECK_SUM_ERROR",
	4:  "UNMARSHAL_MSG_BODY_ERROR",
	5:  "CONNECT_REFUSE",
	6:  "GET_BLOCKCHAIN_ERROR",
	7:  "BLOCKCHAIN_NOTEXIST",
	8:  "GET_BLOCK_ERROR",
	9:  "CONFIRM_BLOCKCHAINSTATUS_ERROR",
	10: "GET_AUTHENTICATION_ERROR",
	11: "GET_AUTHENTICATION_NOT_PASS",
}

var AmperMessage_ErrorType_value = map[string]int32{
	"SUCCESS":                        0,
	"NONE":                           1,
	"UNKNOW_ERROR":                   2,
	"CHECK_SUM_ERROR":                3,
	"UNMARSHAL_MSG_BODY_ERROR":       4,
	"CONNECT_REFUSE":                 5,
	"GET_BLOCKCHAIN_ERROR":           6,
	"BLOCKCHAIN_NOTEXIST":            7,
	"GET_BLOCK_ERROR":                8,
	"CONFIRM_BLOCKCHAINSTATUS_ERROR": 9,
	"GET_AUTHENTICATION_ERROR":       10,
	"GET_AUTHENTICATION_NOT_PASS":    11,
}

func (x AmperMessage_ErrorType) String() string {
	return proto.EnumName(AmperMessage_ErrorType_name, int32(x))
}

func (AmperMessage_ErrorType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{0, 1}
}

// AmperMessage is the message of Amper p2p server
type AmperMessage struct {
	Header               *AmperMessage_MessageHeader `protobuf:"bytes,1,opt,name=Header,proto3" json:"Header,omitempty"`
	Data                 *AmperMessage_MessageData   `protobuf:"bytes,2,opt,name=Data,proto3" json:"Data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *AmperMessage) Reset()         { *m = AmperMessage{} }
func (m *AmperMessage) String() string { return proto.CompactTextString(m) }
func (*AmperMessage) ProtoMessage()    {}
func (*AmperMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{0}
}

func (m *AmperMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AmperMessage.Unmarshal(m, b)
}
func (m *AmperMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AmperMessage.Marshal(b, m, deterministic)
}
func (m *AmperMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AmperMessage.Merge(m, src)
}
func (m *AmperMessage) XXX_Size() int {
	return xxx_messageInfo_AmperMessage.Size(m)
}
func (m *AmperMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_AmperMessage.DiscardUnknown(m)
}

var xxx_messageInfo_AmperMessage proto.InternalMessageInfo

func (m *AmperMessage) GetHeader() *AmperMessage_MessageHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *AmperMessage) GetData() *AmperMessage_MessageData {
	if m != nil {
		return m.Data
	}
	return nil
}

// MessageHeader is the message header of Amper p2p server
type AmperMessage_MessageHeader struct {
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	// dataCheckSum is the message data checksum, it can be used check where the message have been received
	Logid                string                   `protobuf:"bytes,2,opt,name=logid,proto3" json:"logid,omitempty"`
	From                 string                   `protobuf:"bytes,3,opt,name=from,proto3" json:"from,omitempty"`
	Bcname               string                   `protobuf:"bytes,4,opt,name=bcname,proto3" json:"bcname,omitempty"`
	Type                 AmperMessage_MessageType `protobuf:"varint,5,opt,name=type,proto3,enum=amperp2p.AmperMessage_MessageType" json:"type,omitempty"`
	DataCheckSum         uint32                   `protobuf:"varint,6,opt,name=dataCheckSum,proto3" json:"dataCheckSum,omitempty"`
	ErrorType            AmperMessage_ErrorType   `protobuf:"varint,7,opt,name=errorType,proto3,enum=amperp2p.AmperMessage_ErrorType" json:"errorType,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *AmperMessage_MessageHeader) Reset()         { *m = AmperMessage_MessageHeader{} }
func (m *AmperMessage_MessageHeader) String() string { return proto.CompactTextString(m) }
func (*AmperMessage_MessageHeader) ProtoMessage()    {}
func (*AmperMessage_MessageHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{0, 0}
}

func (m *AmperMessage_MessageHeader) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AmperMessage_MessageHeader.Unmarshal(m, b)
}
func (m *AmperMessage_MessageHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AmperMessage_MessageHeader.Marshal(b, m, deterministic)
}
func (m *AmperMessage_MessageHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AmperMessage_MessageHeader.Merge(m, src)
}
func (m *AmperMessage_MessageHeader) XXX_Size() int {
	return xxx_messageInfo_AmperMessage_MessageHeader.Size(m)
}
func (m *AmperMessage_MessageHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_AmperMessage_MessageHeader.DiscardUnknown(m)
}

var xxx_messageInfo_AmperMessage_MessageHeader proto.InternalMessageInfo

func (m *AmperMessage_MessageHeader) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *AmperMessage_MessageHeader) GetLogid() string {
	if m != nil {
		return m.Logid
	}
	return ""
}

func (m *AmperMessage_MessageHeader) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *AmperMessage_MessageHeader) GetBcname() string {
	if m != nil {
		return m.Bcname
	}
	return ""
}

func (m *AmperMessage_MessageHeader) GetType() AmperMessage_MessageType {
	if m != nil {
		return m.Type
	}
	return AmperMessage_SENDBLOCK
}

func (m *AmperMessage_MessageHeader) GetDataCheckSum() uint32 {
	if m != nil {
		return m.DataCheckSum
	}
	return 0
}

func (m *AmperMessage_MessageHeader) GetErrorType() AmperMessage_ErrorType {
	if m != nil {
		return m.ErrorType
	}
	return AmperMessage_SUCCESS
}

// MessageData is the message data of Amper p2p server
type AmperMessage_MessageData struct {
	// msgInfo is the message infomation, use protobuf coding style
	MsgInfo              []byte   `protobuf:"bytes,3,opt,name=msgInfo,proto3" json:"msgInfo,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AmperMessage_MessageData) Reset()         { *m = AmperMessage_MessageData{} }
func (m *AmperMessage_MessageData) String() string { return proto.CompactTextString(m) }
func (*AmperMessage_MessageData) ProtoMessage()    {}
func (*AmperMessage_MessageData) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{0, 1}
}

func (m *AmperMessage_MessageData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AmperMessage_MessageData.Unmarshal(m, b)
}
func (m *AmperMessage_MessageData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AmperMessage_MessageData.Marshal(b, m, deterministic)
}
func (m *AmperMessage_MessageData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AmperMessage_MessageData.Merge(m, src)
}
func (m *AmperMessage_MessageData) XXX_Size() int {
	return xxx_messageInfo_AmperMessage_MessageData.Size(m)
}
func (m *AmperMessage_MessageData) XXX_DiscardUnknown() {
	xxx_messageInfo_AmperMessage_MessageData.DiscardUnknown(m)
}

var xxx_messageInfo_AmperMessage_MessageData proto.InternalMessageInfo

func (m *AmperMessage_MessageData) GetMsgInfo() []byte {
	if m != nil {
		return m.MsgInfo
	}
	return nil
}

func init() {
	proto.RegisterEnum("amperp2p.AmperMessage_MessageType", AmperMessage_MessageType_name, AmperMessage_MessageType_value)
	proto.RegisterEnum("amperp2p.AmperMessage_ErrorType", AmperMessage_ErrorType_name, AmperMessage_ErrorType_value)
	proto.RegisterType((*AmperMessage)(nil), "amperp2p.AmperMessage")
	proto.RegisterType((*AmperMessage_MessageHeader)(nil), "amperp2p.AmperMessage.MessageHeader")
	proto.RegisterType((*AmperMessage_MessageData)(nil), "amperp2p.AmperMessage.MessageData")
}

func init() { proto.RegisterFile("message.proto", fileDescriptor_33c57e4bae7b9afd) }

var fileDescriptor_33c57e4bae7b9afd = []byte{
	// 581 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x94, 0xd1, 0x4e, 0xdb, 0x3e,
	0x14, 0xc6, 0x69, 0x69, 0xd3, 0xe6, 0xb4, 0x05, 0xff, 0x0f, 0x88, 0x7f, 0xc4, 0xd0, 0x56, 0x55,
	0x93, 0xc6, 0x55, 0x2f, 0x98, 0xb4, 0xab, 0x69, 0x52, 0x30, 0x86, 0x46, 0x50, 0xbb, 0xb2, 0x1d,
	0x0d, 0xae, 0xa2, 0x00, 0x81, 0xa1, 0xad, 0x24, 0x4a, 0xcb, 0x34, 0x9e, 0x60, 0x6f, 0xb2, 0xdb,
	0xbd, 0xc8, 0x1e, 0x6a, 0xb2, 0x93, 0x96, 0x32, 0xe8, 0x76, 0xd5, 0x9e, 0xef, 0xfb, 0x7d, 0x3e,
	0xc7, 0xc7, 0x52, 0xa0, 0x33, 0x4e, 0x26, 0x93, 0xf8, 0x3a, 0xe9, 0x67, 0x79, 0x3a, 0x4d, 0xb1,
	0xf9, 0xed, 0x2e, 0x4b, 0xf2, 0x6c, 0x2f, 0xeb, 0xfd, 0x6c, 0x42, 0xfb, 0xd4, 0x14, 0xc3, 0x02,
	0xc0, 0xf7, 0xe0, 0x0c, 0x92, 0xf8, 0x32, 0xc9, 0xbd, 0x4a, 0xb7, 0xb2, 0xdb, 0xda, 0x7b, 0xdd,
	0x9f, 0xb1, 0xfd, 0x45, 0xae, 0x5f, 0xfe, 0x16, 0xac, 0x2c, 0x33, 0xf8, 0x0e, 0x6a, 0x07, 0xf1,
	0x34, 0xf6, 0xaa, 0x36, 0xdb, 0xfb, 0x7b, 0xd6, 0x90, 0xd2, 0xf2, 0xdb, 0xdf, 0xab, 0xd0, 0x79,
	0x74, 0x22, 0x7a, 0xd0, 0xf8, 0x9a, 0xe4, 0x93, 0x9b, 0xf4, 0xd6, 0x0e, 0xe2, 0xca, 0x59, 0x89,
	0x9b, 0x50, 0xff, 0x92, 0x5e, 0xdf, 0x5c, 0xda, 0x26, 0xae, 0x2c, 0x0a, 0x44, 0xa8, 0x5d, 0xe5,
	0xe9, 0xd8, 0x5b, 0xb5, 0xa2, 0xfd, 0x8f, 0x5b, 0xe0, 0x9c, 0x5f, 0xdc, 0xc6, 0xe3, 0xc4, 0xab,
	0x59, 0xb5, 0xac, 0xcc, 0x94, 0xd3, 0xfb, 0x2c, 0xf1, 0xea, 0xdd, 0xca, 0xee, 0xda, 0xbf, 0xa6,
	0xd4, 0xf7, 0x59, 0x22, 0x2d, 0x8f, 0x3d, 0x68, 0x5f, 0xc6, 0xd3, 0x98, 0x7e, 0x4a, 0x2e, 0x3e,
	0xab, 0xbb, 0xb1, 0xe7, 0x74, 0x2b, 0xbb, 0x1d, 0xf9, 0x48, 0xc3, 0x0f, 0xe0, 0x26, 0x79, 0x9e,
	0xe6, 0x26, 0xe6, 0x35, 0x6c, 0x83, 0xee, 0x92, 0x06, 0x6c, 0xc6, 0xc9, 0x87, 0xc8, 0xf6, 0x1b,
	0x68, 0x2d, 0xac, 0xc7, 0xac, 0x61, 0x3c, 0xb9, 0x0e, 0x6e, 0xaf, 0x52, 0x7b, 0xb3, 0xb6, 0x9c,
	0x95, 0xbd, 0x5f, 0xd5, 0x39, 0x69, 0x82, 0xd8, 0x01, 0x57, 0x31, 0x7e, 0xb0, 0x7f, 0x22, 0xe8,
	0x31, 0x59, 0x41, 0x00, 0x67, 0x24, 0x94, 0xd6, 0xa7, 0xa4, 0x82, 0xeb, 0xd0, 0xda, 0xf7, 0x35,
	0x1d, 0x94, 0x42, 0xd5, 0xb0, 0x47, 0x4c, 0x47, 0x05, 0xbb, 0x8a, 0x4d, 0xa8, 0x8d, 0x02, 0x7e,
	0x44, 0x6a, 0xe8, 0xc1, 0xe6, 0xdc, 0xa0, 0x03, 0x3f, 0xe0, 0x4a, 0xfb, 0x3a, 0x54, 0xa4, 0x8e,
	0xff, 0x41, 0x67, 0xee, 0x44, 0x92, 0x29, 0xe2, 0xe0, 0x0e, 0x78, 0xcf, 0xc1, 0xd6, 0x6d, 0x18,
	0x97, 0x0a, 0x7e, 0x18, 0xc8, 0xe1, 0xd3, 0xe3, 0x9a, 0xd8, 0x85, 0x9d, 0x65, 0xae, 0xcd, 0xbb,
	0xa6, 0xe1, 0x50, 0x1d, 0x45, 0xfa, 0x6c, 0xc4, 0x22, 0x2e, 0x38, 0x23, 0x80, 0x04, 0xda, 0xa6,
	0xa1, 0x1c, 0xd1, 0x68, 0x24, 0xa4, 0x26, 0x2d, 0xdc, 0x04, 0xb2, 0xa8, 0xd8, 0x68, 0x1b, 0xb7,
	0x00, 0x8d, 0xea, 0x87, 0x7a, 0xc0, 0xb8, 0x0e, 0xa8, 0xaf, 0x03, 0xc1, 0x49, 0x07, 0xb7, 0x61,
	0xeb, 0xa9, 0x6e, 0x33, 0x6b, 0xbd, 0x1f, 0x55, 0x70, 0xe7, 0x0f, 0x82, 0x2d, 0x68, 0xa8, 0x90,
	0x52, 0xa6, 0x14, 0x59, 0x31, 0xeb, 0xb1, 0x03, 0x54, 0xcc, 0x00, 0x21, 0x3f, 0xe6, 0xe2, 0x63,
	0xc4, 0xa4, 0x14, 0x92, 0x54, 0x71, 0x03, 0xd6, 0xe9, 0x80, 0xd1, 0xe3, 0x48, 0x85, 0xc3, 0x52,
	0x5c, 0x35, 0x57, 0x0f, 0xf9, 0xd0, 0x97, 0x6a, 0xe0, 0x9f, 0x44, 0xe6, 0x12, 0xfb, 0xe2, 0xe0,
	0xac, 0x74, 0x6b, 0x88, 0xb0, 0x46, 0x05, 0xe7, 0x8c, 0x9a, 0x71, 0x0f, 0x43, 0xc5, 0x48, 0xfd,
	0xe9, 0xde, 0x4b, 0xda, 0xc1, 0xff, 0x61, 0x63, 0x41, 0xe5, 0x42, 0xb3, 0xd3, 0x40, 0x69, 0xd2,
	0x30, 0x9d, 0x1f, 0x1e, 0xa4, 0xa0, 0x9b, 0xd8, 0x83, 0x97, 0x4b, 0xd7, 0x5a, 0x30, 0xee, 0xec,
	0xd9, 0xfe, 0xd8, 0x42, 0xe1, 0x02, 0xbe, 0x82, 0x17, 0xcf, 0xb8, 0x5c, 0xe8, 0x68, 0xe4, 0x2b,
	0x45, 0x5a, 0xe7, 0x8e, 0xfd, 0x84, 0xbc, 0xfd, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x14, 0xb1, 0xbe,
	0xf1, 0x53, 0x04, 0x00, 0x00,
}
